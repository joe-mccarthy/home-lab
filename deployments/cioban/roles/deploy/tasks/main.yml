---
# This task file is responsible for deploying the Cioban stack using Docker Swarm.
# It ensures that Docker and docker-compose are installed and running, removes any existing services,
# sets up the required directory structure, deploys the stack, and cleans up temporary files.

- name: Ensure docker-compose is installed
  ansible.builtin.package:
    name: docker-compose  # The package name for docker-compose.
    state: present  # Ensure docker-compose is installed on the target system.
  # This task ensures that docker-compose is available for managing Docker-based applications.

- name: Ensure Docker service is running
  ansible.builtin.service:
    name: docker  # The name of the Docker service.
    state: started  # Ensure the Docker service is running.
    enabled: true  # Ensure the Docker service starts on boot.
  # This task ensures that the Docker daemon is active and ready to manage containers.

- name: Remove service
  docker_swarm_service:
    name: cioban_cioban  # The name of the Docker Swarm service to remove.
    state: absent  # Ensure the service is removed.
  ignore_errors: true  # Allow the playbook to continue even if this task fails.
  # This task removes any existing instance of the Cioban service to avoid conflicts during deployment.

- name: Setup Cioban directory
  ansible.builtin.file:
    path: /home/docker-compose/cioban  # The path to the directory to be created.
    state: directory  # Ensure the path is a directory.
    mode: '0755'  # Set the directory permissions (read, write, execute for owner; read and execute for others).
    owner: nobody  # Set the directory owner to `nobody`.
    group: nogroup  # Set the directory group to `nogroup`.
  # This task creates the directory structure required for the deployment.

- name: Copy compose from template to host
  ansible.builtin.template:
    src: "templates/docker-compose.yml"  # Path to the Jinja2 template for the docker-compose file.
    dest: "/home/docker-compose/cioban/docker-compose.yaml"  # Destination path for the docker-compose file.
    mode: '0755'  # Set the file permissions (read, write, execute for owner; read and execute for others).
    owner: nobody  # Set the file owner to `nobody`.
    group: nogroup  # Set the file group to `nogroup`.
  # This task copies the docker-compose template to the target system, ensuring it is ready for deployment.

- name: Deploy Cioban stack
  ansible.builtin.command:
    cmd: docker stack deploy -c /home/docker-compose/cioban/docker-compose.yaml --with-registry-auth cioban
    # The `docker stack deploy` command deploys the stack using the specified compose file.
    # - `-c`: Specifies the path to the docker-compose file.
    # - `--with-registry-auth`: Passes the registry authentication credentials to the Swarm nodes.
    # - `cioban`: The name of the stack to deploy.
  register: swarm_check  # Store the output of the command in the `swarm_check` variable.
  changed_when: false  # Ensure this task does not mark the playbook as "changed."
  # This task deploys the Cioban stack to the Docker Swarm cluster.

- name: delete compose directory
  ansible.builtin.command:
    cmd: rm -rf /home/docker-compose  # Remove the temporary directory and its contents.
  # This task cleans up the temporary files and directories created during the deployment process.

# Notes:
# - Ensure that Docker and Docker Swarm are properly configured on the target system before running this playbook.
# - The `docker-compose.yml` template should define the services, networks, and volumes required for the Cioban stack.
# - The `--with-registry-auth` flag ensures that private registry credentials are passed to the Swarm nodes.
# - The cleanup step (`delete compose directory`) is optional and can be removed if the compose files need to be retained.
# - Use caution when setting permissions (`0755`) and ownership (`nobody:nogroup`) to avoid security risks.
