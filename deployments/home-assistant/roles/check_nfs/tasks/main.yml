---
# ============================================================================
# Home Assistant NFS Infrastructure Setup Tasks
# ============================================================================
# This Ansible task file prepares the NFS-based storage infrastructure required
# for Home Assistant deployment in a containerized environment. It creates the
# necessary directory structure, sets appropriate permissions for Docker containers,
# and ensures all required configuration files are in place.
#
# Purpose:
# - Establish persistent storage on NFS for Home Assistant data
# - Create directory structure for Home Assistant and related services
# - Initialize default configuration files
# - Set proper permissions for container access
# ============================================================================

# ============================================================================
# Primary NFS Directory Setup
# ============================================================================
- name: Create Home Assistant root NFS directory
  ansible.builtin.file:
    path: /mnt/nfs/docker/home_assistant
    state: directory
    mode: '0777'
    owner: nobody
    group: nogroup
  # Creates the primary NFS directory for Home Assistant persistent storage.
  # 
  # Permissions Rationale:
  # - 0777: Allows full access for Docker containers running with different UIDs
  # - nobody/nogroup: Standard NFS ownership for shared storage across hosts
  # 
  # Security Note: While 0777 is permissive, it's necessary for Docker containers
  # that may run with varying user IDs across different nodes in the cluster.

# ============================================================================
# Local Docker Compose Directory
# ============================================================================
- name: Create local Docker Compose directory for Home Assistant
  ansible.builtin.file:
    path: /home/docker-compose/home_assistant
    state: directory
    mode: '0755'
    owner: nobody
    group: nogroup
  # Creates local directory for Docker Compose files and deployment scripts.
  # This directory contains the orchestration files but not the persistent data.
  #
  # Permissions:
  # - 0755: Standard directory permissions (owner: rwx, group/others: rx)
  # - More restrictive than NFS directories as this contains deployment configs

# ============================================================================
# MQTT Broker Directory Structure
# ============================================================================
- name: Create Mosquitto MQTT broker directory
  ansible.builtin.file:
    path: /mnt/nfs/docker/home_assistant/mosquitto
    state: directory
    mode: '0755'
    owner: nobody
    group: nogroup
  # Establishes persistent storage for the Mosquitto MQTT broker.
  # The MQTT broker serves as the communication backbone for IoT devices
  # and Home Assistant, enabling device discovery and state management.
  #
  # Directory Contents (when deployed):
  # - mosquitto.conf: Broker configuration
  # - data/: Persistent message storage
  # - log/: Broker operation logs

# ============================================================================
# Zigbee2MQTT Service Directories
# ============================================================================
- name: Create Zigbee2MQTT service directory
  ansible.builtin.file:
    path: /mnt/nfs/docker/home_assistant/zigbee2mqtt
    state: directory
    mode: '0755'
    owner: nobody
    group: nogroup
  # Creates the root directory for Zigbee2MQTT service data.
  # Zigbee2MQTT acts as a bridge between Zigbee devices and MQTT,
  # enabling Home Assistant to control Zigbee smart home devices.

- name: Create Zigbee2MQTT data directory
  ansible.builtin.file:
    path: /mnt/nfs/docker/home_assistant/zigbee2mqtt/data
    state: directory
    mode: '0755'
    owner: nobody
    group: nogroup
  # Creates the data subdirectory for Zigbee2MQTT persistent storage.
  #
  # Critical Data Stored Here:
  # - configuration.yaml: Zigbee2MQTT configuration
  # - coordinator_backup.json: Zigbee network backup
  # - database.db: Device database and network state
  # - devices.yaml: Device-specific configurations
  # - groups.yaml: Zigbee group definitions
  #
  # Backup Importance: This directory contains the complete Zigbee network
  # state and should be included in regular backup procedures.

# ============================================================================
# Home Assistant Configuration Files
# ============================================================================
- name: Initialize Home Assistant configuration files
  ansible.builtin.file:
    path: "/mnt/nfs/docker/home_assistant/{{ item }}"
    state: touch
  with_items:
  - automations.yaml
  - scenes.yaml
  - scripts.yaml
  # Creates empty configuration files required by Home Assistant.
  # These files are created if they don't exist to prevent startup errors.
  #
  # File Purposes:
  # - automations.yaml: Stores automated actions and triggers
  # - scenes.yaml: Defines scene configurations for device states
  # - scripts.yaml: Contains reusable script sequences
  #
  # Note: Using 'touch' creates empty files that Home Assistant can populate
  # through its web interface or manual configuration.

# ============================================================================
# Template Deployment Tasks
# ============================================================================
- name: Deploy Home Assistant main configuration from template
  ansible.builtin.template:
    src: "templates/configuration.yaml"
    dest: "/mnt/nfs/docker/home_assistant/configuration.yaml"
    force: false
  # Deploys the main Home Assistant configuration from Jinja2 template.
  # This file contains core Home Assistant settings, integrations, and
  # references to other configuration files.
  #
  # Template Variables Used:
  # - Proxy configuration for external access
  # - MQTT server settings
  # - Database configuration
  # - Integration-specific settings
  #
  # Force Update: Always overwrites existing file to ensure consistency
  # with the deployment configuration.

- name: Deploy Zigbee2MQTT configuration from template
  ansible.builtin.template:
    src: "templates/zigbee/configuration.yaml"
    dest: "/mnt/nfs/docker/home_assistant/zigbee2mqtt/data/configuration.yaml"
    force: false
  # Deploys Zigbee2MQTT configuration from template with environment-specific
  # settings such as MQTT broker address and Zigbee coordinator device path.
  #
  # Template Variables Used:
  # - mqtt_server: MQTT broker connection details
  # - zigbee_serial_port: USB coordinator device path
  # - Network security settings
  # - Frontend configuration

# ============================================================================
# Infrastructure Notes and Best Practices
# ============================================================================
#
# 1. NFS Storage Considerations:
#    - Ensure NFS server has sufficient space for Home Assistant database growth
#    - Configure NFS with appropriate performance settings (async/sync)
#    - Implement regular backup strategy for critical data directories
#    - Monitor NFS connectivity and implement alerting for mount failures
#
# 2. Permission Management:
#    - The 0777 permission on the main NFS directory allows Docker containers
#      with varying UIDs to access the storage across cluster nodes
#    - nobody/nogroup ownership is standard for NFS shared storage
#    - Subdirectories use 0755 for better security while maintaining access
#
# 3. Security Considerations:
#    - NFS exports should be restricted to authorized cluster nodes only
#    - Consider implementing NFS over TLS for sensitive environments
#    - Regular security audits of NFS permissions and access logs
#    - Firewall rules should restrict NFS access to cluster network
#
# 4. Disaster Recovery:
#    - Zigbee coordinator backup is critical for device recovery
#    - Home Assistant database contains all device history and configurations
#    - Configuration files should be version controlled separately
#    - Test restore procedures regularly in non-production environment
#
# 5. Monitoring and Maintenance:
#    - Monitor NFS mount status across all cluster nodes
#    - Track disk usage growth, especially for database and logs
#    - Implement log rotation for service containers
#    - Regular health checks for MQTT and Zigbee connectivity
#
# 6. Deployment Dependencies:
#    - NFS mount point (/mnt/nfs/docker) must be available before execution
#    - Docker runtime must be installed and configured on target hosts
#    - Zigbee coordinator hardware must be connected and accessible
#    - Network connectivity to MQTT broker must be established
