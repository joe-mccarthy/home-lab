---
# This playbook is responsible for tearing down a Docker Swarm cluster.
# It stops all running services, removes worker nodes, ensures all nodes leave the Swarm,
# and performs a cleanup of Docker resources on all nodes.

- name: Stop All Services
  hosts: manager[0]  # Target the first manager node in the `manager` group.
  become: true  # Execute tasks with elevated privileges (sudo).
  ignore_errors: yes  # Allow the playbook to continue even if this task fails.
  roles:
  - stop_services  # Use the `stop_services` role to stop all running Docker services in the Swarm.
  # This step ensures that all services in the Swarm cluster are stopped before proceeding with node removal.

- name: Remove Workers
  hosts: manager[0]  # Target the first manager node in the `manager` group.
  become: true  # Execute tasks with elevated privileges (sudo).
  ignore_errors: yes  # Allow the playbook to continue even if this task fails.
  roles:
  - remove_workers  # Use the `remove_workers` role to drain and remove worker nodes from the Swarm.
  # This step ensures that all worker nodes are removed from the Swarm cluster.

- name: Leave Swarm (Workers)
  hosts: docker  # Target all worker nodes in the `docker` group.
  become: true  # Execute tasks with elevated privileges (sudo).
  ignore_errors: yes  # Allow the playbook to continue even if this task fails.
  roles:
  - leave_swarm  # Use the `leave_swarm` role to remove worker nodes from the Swarm.
  # This step ensures that all worker nodes leave the Swarm cluster.

- name: Leave Swarm (Managers)
  hosts: manager  # Target all manager nodes in the `manager` group.
  order: reverse_inventory  # Process the manager nodes in reverse order to avoid quorum issues.
  become: true  # Execute tasks with elevated privileges (sudo).
  ignore_errors: yes  # Allow the playbook to continue even if this task fails.
  roles:
  - leave_swarm  # Use the `leave_swarm` role to remove manager nodes from the Swarm.
  # This step ensures that all manager nodes leave the Swarm cluster, starting with the last manager.

- name: Clean Docker
  hosts: cluster  # Target all nodes in the cluster (managers and workers).
  become: true  # Execute tasks with elevated privileges (sudo).
  ignore_errors: yes  # Allow the playbook to continue even if this task fails.
  roles:
  - docker_clean_up  # Use the `docker_clean_up` role to remove unused Docker resources (containers, images, volumes, networks).
  # This step ensures that all Docker resources are cleaned up on all nodes, leaving them in a clean state.

# Notes:
# - This playbook assumes that Docker is installed and running on all target nodes.
# - The `ignore_errors: yes` directive ensures that the playbook continues even if some tasks fail, which is useful
#   when tearing down a cluster where some nodes may already be in an inconsistent state.
# - The `order: reverse_inventory` directive for manager nodes ensures that the last manager node leaves the Swarm last,
#   preventing quorum issues during the teardown process.
# - Use caution when running this playbook, as it will permanently stop services, remove nodes from the Swarm,
#   and clean up Docker resources.
# - This playbook is intended for decommissioning or resetting a Docker Swarm cluster.
