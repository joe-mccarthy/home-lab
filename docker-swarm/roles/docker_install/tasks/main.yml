---
# This task file is responsible for installing and configuring Docker on a node.
# It ensures that all required dependencies are installed, Docker is set up, and the service is running.
# Additionally, it configures Docker daemon options and logs into a private Docker registry.

- name: Ensure apt packages and HTTPS
  ansible.builtin.apt:
    name: "{{ item }}"  # Install the specified packages.
    state: present  # Ensure the packages are installed.
    update_cache: yes  # Update the apt cache before installing packages.
  loop:
    - apt-transport-https  # Allows the use of HTTPS for apt repositories.
    - ca-certificates  # Provides SSL certificates for secure communication.
    - curl  # A command-line tool for transferring data with URLs.
    - software-properties-common  # Provides utilities for managing software repositories.

- name: Add Docker GPG key
  ansible.builtin.apt_key:
    url: "https://download.docker.com/linux/ubuntu/gpg"  # URL of the Docker GPG key.
    state: present  # Ensure the GPG key is added.
  # The GPG key is required to verify the authenticity of the Docker packages.

- name: Get DEB architecture
  shell: dpkg --print-architecture  # Retrieve the architecture of the system (e.g., amd64, arm64).
  register: deb_architecture  # Store the output in the `deb_architecture` variable.
  # This step ensures that the correct Docker repository is added based on the system architecture.

- name: Add Docker repository
  ansible.builtin.apt_repository:
    repo: "{{ docker_apt_repository }}"  # The Docker repository URL.
    state: present  # Ensure the repository is added.
  # The Docker repository provides access to the latest Docker packages.

- name: Install Docker Packages
  ansible.builtin.apt:
    name: "{{ item }}"  # Install the specified Docker packages.
    state: present  # Ensure the packages are installed.
  loop:
    - docker-ce  # The Docker Community Edition engine.
    - docker-ce-cli  # The Docker CLI tools.
    - containerd.io  # The container runtime used by Docker.
    - docker-compose-plugin  # The Docker Compose plugin for managing multi-container applications.

- name: Configure Docker daemon options
  ansible.builtin.template:
    src: "templates/docker_daemon.json.j2"  # Path to the Jinja2 template for the Docker daemon configuration.
    dest: "/etc/docker/daemon.json"  # Destination path for the Docker daemon configuration file.
    owner: 'root'  # Set the file owner to `root`.
    group: 'root'  # Set the file group to `root`.
    mode: '0755'  # Set the file permissions (read, write, and execute for the owner; read and execute for others).
  notify: Restart Docker  # Trigger the `Restart Docker` handler to apply the configuration changes.
  # This step configures Docker daemon options, such as logging drivers, storage drivers, or other custom settings.

- name: Ensure Docker service is enabled and running
  ansible.builtin.systemd:
    name: docker  # The name of the Docker service.
    enabled: true  # Ensure the service is enabled to start on boot.
    state: started  # Ensure the service is running.
  # This step ensures that the Docker service is active and will persist across reboots.

- name: Docker Permissions
  command: "{{ item }}"  # Execute the specified command.
  with_items:
    - usermod -aG docker $USER  # Add the current user to the `docker` group for non-root access to Docker.
  ignore_errors: yes  # Ignore errors if the user is already in the `docker` group.
  # This step allows the current user to run Docker commands without using `sudo`.

- name: docker login to registry
  ansible.builtin.command:
    cmd: docker login -u {{ registry_user }} -p {{ registry_password }} {{ registry_url }}
  # Log in to the private Docker registry using the provided credentials.
  # The `registry_user`, `registry_password`, and `registry_url` variables should be defined in group variables or an Ansible Vault.

# Notes:
# - Ensure that the `docker_apt_repository` variable is defined in your group variables file.
#   Example: `docker_apt_repository: "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"`
# - The `templates/docker_daemon.json.j2` file should contain the desired Docker daemon configuration.
# - Be cautious when running the `docker login` task, as it stores credentials locally on the node.
# - This playbook assumes that the target system is running Ubuntu or a compatible Debian-based distribution.

