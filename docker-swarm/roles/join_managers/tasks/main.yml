---
# This task file is responsible for adding a node as a manager to an existing Docker Swarm cluster.
# It checks if the node is already part of a Swarm, retrieves the manager join token from an existing manager,
# and uses the token to join the node as a manager.

- name: Check if Swarm is already initialized
  ansible.builtin.command:
    cmd: docker info  # Run the `docker info` command to check the current Docker configuration.
  register: swarm_check  # Store the output of the command in the `swarm_check` variable.
  changed_when: false  # Ensure this task does not mark the playbook as "changed".
  # This task checks if the node is already part of a Swarm by analyzing the output of `docker info`.
  # If the node is not part of a Swarm, the next tasks will retrieve the join token and add it as a manager.

- name: Retrieve manager join token from manager
  ansible.builtin.set_fact:
    manager_token: "{{ hostvars[groups['manager'][0]]['manager_token'].stdout }}"
    # Retrieve the manager join token from the first manager node in the `manager` group.
    # The `hostvars` dictionary allows access to variables from other hosts in the inventory.
    # `groups['manager'][0]` refers to the first host in the `manager` group.
  when: "'Swarm: inactive' in swarm_check.stdout"  # Only run this task if the node is not part of a Swarm.
  # This task ensures that the manager join token is retrieved only when the node is not already part of a Swarm.

- name: Join manager to Swarm
  ansible.builtin.command:
    cmd: docker swarm join --token {{ manager_token }} {{ hostvars[groups['manager'][0]].ansible_default_ipv4.address }}:2377
    # The `docker swarm join` command adds the node to the Swarm as a manager.
    # - `--token {{ manager_token }}`: Specifies the manager join token retrieved from the first manager node.
    # - `{{ hostvars[groups['manager'][0]].ansible_default_ipv4.address }}:2377`: Specifies the IP address
    #   and port of the first manager node to connect to.
  when:
    - manager_token is defined  # Ensure the manager join token is available.
    - "'Swarm: inactive' in swarm_check.stdout"  # Ensure the node is not already part of a Swarm.
  register: swarm_join  # Store the output of the join command in the `swarm_join` variable.
  changed_when: "'This node joined a swarm as a manager' in swarm_join.stdout"
  # Mark the task as "changed" only if the output indicates that the node successfully joined the Swarm as a manager.

# Notes:
# - This playbook assumes that the `manager_token` is already generated and available on the first manager node.
# - The `hostvars` dictionary is used to access variables from other hosts in the inventory, allowing dynamic retrieval
#   of the manager join token and the IP address of the first manager node.
# - Ensure that the `manager` group in the inventory contains at least one manager node with a valid join token.
# - The `docker swarm join` command requires network connectivity between the joining node and the manager node.
# - If the node is already part of a Swarm, the tasks will be skipped to avoid unnecessary operations.
