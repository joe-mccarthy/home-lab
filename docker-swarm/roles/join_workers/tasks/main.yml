---
# This task file is responsible for adding a node as a worker to an existing Docker Swarm cluster.
# It checks if the node is already part of a Swarm, retrieves the worker join token from an existing manager,
# and uses the token to join the node as a worker.

- name: Check if Swarm is already initialized
  ansible.builtin.command:
    cmd: docker info  # Run the `docker info` command to check the current Docker configuration.
  register: swarm_check  # Store the output of the command in the `swarm_check` variable.
  changed_when: false  # Ensure this task does not mark the playbook as "changed".
  # This task checks if the node is already part of a Swarm by analyzing the output of `docker info`.
  # If the node is not part of a Swarm, the next tasks will retrieve the join token and add it as a worker.

- name: Retrieve worker join token from manager
  ansible.builtin.set_fact:
    worker_token: "{{ hostvars[groups['manager'][0]]['worker_token'].stdout }}"
    # Retrieve the worker join token from the first manager node in the `manager` group.
    # The `hostvars` dictionary allows access to variables from other hosts in the inventory.
    # `groups['manager'][0]` refers to the first host in the `manager` group.
  when: "'Swarm: inactive' in swarm_check.stdout"  # Only run this task if the node is not part of a Swarm.
  # This task ensures that the worker join token is retrieved only when the node is not already part of a Swarm.

- name: Join worker to Swarm
  ansible.builtin.command:
    argv:
    - docker
    - swarm
    - join
    - --token
    - "{{ worker_token }}"  # Use the worker join token retrieved from the manager node.
    - "{{ hostvars[groups['manager'][0]].ansible_default_ipv4.address }}:2377"
    # The `docker swarm join` command adds the node to the Swarm as a worker.
    # - `--token {{ worker_token }}`: Specifies the worker join token.
    # - `{{ hostvars[groups['manager'][0]].ansible_default_ipv4.address }}:2377`: Specifies the IP address
    #   and port of the first manager node to connect to.
  when:
  - worker_token is defined  # Ensure the worker join token is available.
  - "'Swarm: inactive' in swarm_check.stdout"  # Ensure the node is not already part of a Swarm.
  changed_when: true  # Mark the task as "changed" if the node successfully joins the Swarm as a worker.
  # This task ensures that the node joins the Swarm as a worker only when it is not already part of a Swarm.

# Notes:
# - This playbook assumes that the `worker_token` is already generated and available on the first manager node.
# - The `hostvars` dictionary is used to access variables from other hosts in the inventory, allowing dynamic retrieval
#   of the worker join token and the IP address of the first manager node.
# - Ensure that the `manager` group in the inventory contains at least one manager node with a valid join token.
# - The `docker swarm join` command requires network connectivity between the joining node and the manager node.
# - If the node is already part of a Swarm, the tasks will be skipped to avoid unnecessary operations.
