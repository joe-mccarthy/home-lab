---
# This task file is responsible for stopping all running Docker services in a Swarm cluster.
# It first checks the number of active services and then removes them if any are found.

- name: Get Docker Service Count
  ansible.builtin.shell: docker service ls -q | wc -l
  # The `docker service ls -q` command lists the IDs of all running Docker services.
  # The `wc -l` command counts the number of lines in the output, effectively giving the total number of services.
  register: service_count  # Store the output of the command in the `service_count` variable.
  changed_when: false  # Ensure this task does not mark the playbook as "changed."
  ignore_errors: yes  # Allow the playbook to continue even if this task fails.
  # This task retrieves the total number of running Docker services in the Swarm cluster.

- name: Stop All Docker Services
  ansible.builtin.shell: docker service ls -q | xargs docker service rm
  # The `docker service ls -q` command lists the IDs of all running Docker services.
  # The `xargs docker service rm` command removes all the services listed by the previous command.
  ignore_errors: yes  # Allow the playbook to continue even if this task fails.
  changed_when: false  # Ensure this task does not mark the playbook as "changed."
  register: service_stop  # Store the output of the command in the `service_stop` variable.
  when: service_count.stdout != "0"
  # The `when` clause ensures that this task runs only if there are active services to stop.
  # If no services are running (`service_count.stdout == "0"`), this task is skipped.

# Notes:
# - The `docker service rm` command permanently removes the services from the Swarm cluster.
#   Ensure that this operation is intentional, as it cannot be undone.
# - The `ignore_errors` directive is useful for handling cases where no services are running or if there are issues
#   with the Docker daemon.
# - The `changed_when: false` directive ensures that these tasks do not mark the playbook as "changed," maintaining idempotency.
# - This playbook assumes that Docker is installed and running on the target node and that the node is part of a Swarm cluster.
# - Use caution when running this playbook in production environments, as it will stop all services in the cluster.
