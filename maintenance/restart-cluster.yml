---
# This playbook is responsible for restarting all nodes in the cluster in a controlled manner.
# It targets all hosts in the "cluster" group and ensures that the reboot process is handled properly,
# including verification that the systems successfully come back online after rebooting.
#
# Use Cases:
# - After system updates that require a reboot
# - To clear memory leaks or system state issues
# - As part of scheduled maintenance procedures
# - To apply kernel updates or configuration changes

- hosts: cluster  # Target all hosts in the "cluster" group defined in the inventory.
  become: true    # Run all tasks with elevated privileges (e.g., sudo) to allow system reboot.

  tasks:  # Define the list of tasks to execute.

    # Task 1: Reboot the system
    - name: Reboot system
      reboot:
        # The 'reboot' module handles the system restart and waits for it to come back online
        # Default parameters (which can be added explicitly if needed):
        # - msg: Optional message for users logged into the system
        # - pre_reboot_delay: Seconds to wait before issuing reboot command (default: 0)
        # - post_reboot_delay: Seconds to wait after the reboot (default: 0)
        # - connect_timeout: Maximum seconds to wait for connection during reboot (default: 300)
        # - test_command: Command to run to verify the system is operational (default: whoami)
        # - reboot_timeout: Maximum seconds to wait for machine to reboot (default: 600)
      register: reboot_result  # Store the result of the reboot operation for later verification
      # When this task completes successfully, it means:
      # 1. The reboot command was issued successfully
      # 2. The system has gone down for reboot
      # 3. The system has come back online
      # 4. Ansible has successfully reconnected to it

    # Task 2: Verify the reboot was successful
    - name: Assert reboot succeeded  
      assert:
        that:
          - reboot_result.rebooted == true  # Verify that the system was actually rebooted
        # This assertion fails if:
        # - The reboot command did not execute properly
        # - The system did not come back online within the timeout period
        # - Ansible could not reconnect to the host after reboot
        # The assertion provides clear feedback in the playbook results
        # rather than just moving on to the next tasks
        success_msg: "System successfully rebooted and is now online"
        fail_msg: "System reboot failed or did not complete within the expected timeframe"

# Notes:
# - This playbook will cause temporary downtime for all cluster nodes
# - Consider using a rolling reboot strategy for production environments to maintain service availability
# - The playbook does not check for running workloads before reboot - add pre-checks if needed
# - Adjust timeout parameters if your systems take longer to reboot than the default timeouts
# - For large clusters, consider using serial: parameter to reboot hosts in batches
