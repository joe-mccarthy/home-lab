---
# This playbook configures new or existing machines in the home lab cluster.
# It handles SSH key management, system updates, essential package installation, 
# and performs necessary system maintenance tasks.

- hosts: all  # Target all hosts defined in the inventory
  become: true  # Execute tasks with elevated privileges (sudo)
  vars:
    user_keys: "{{ lookup('env', 'USER') }}"  # Get current username from environment
    # This variable determines which user account will receive the SSH authorized key

  tasks:
    # Task 1: Configure SSH key-based authentication
    - name: "Setting authorized key for user {{ user_keys }}"
      ansible.posix.authorized_key:
        user: "{{ user_keys }}"  # Target user account
        state: present  # Ensure key exists in authorized_keys
        key: "{{ lookup('file', lookup('env','HOME') + public_key ) }}"  # Read public key from file
      # This enables password-less SSH access to the target machine
      # Note: The public_key variable should be defined in group_vars or command line

    # Task 2: Update all system packages
    - name: Update system packages
      when: ansible_facts['os_family'] == 'Debian'  # Only for Debian/Ubuntu systems
      ansible.builtin.apt:
        upgrade: dist  # Full distribution upgrade (equivalent to apt dist-upgrade)
        update_cache: true  # Update package index before upgrading (equivalent to apt update)
      # This ensures all packages are updated to their latest versions, including security patches

    # Task 3: Detect if system requires reboot
    - name: Check if system requires reboot
      when: ansible_facts['os_family'] == 'Debian'
      ansible.builtin.stat:
        path: /var/run/reboot-required  # File created by package manager when reboot needed
      register: ubuntu_reboot_required  # Store result for conditional use in next task
      # Many kernel updates and critical system packages require a reboot to take effect

    # Task 4: Perform system reboot if needed
    - name: Reboot system if required
      when: ubuntu_reboot_required.stat.exists | default(false)  # Only reboot when file exists
      ansible.builtin.reboot:
        reboot_timeout: 600  # Wait up to 10 minutes for system to come back online
      # This task ensures system changes are properly applied and avoids unexpected downtime
      # by performing controlled reboots only when necessary

    # Task 5: Install essential system utilities
    - name: Install core packages
      ansible.builtin.apt:
        name: "{{ item }}"  # Install packages one by one
        state: present  # Ensure packages are installed
      loop:
        - htop          # Interactive process viewer and system monitor
        - curl          # Command-line tool for data transfer with URL syntax
        - wget          # Non-interactive network downloader
        - git           # Distributed version control system
        - unzip         # Extract ZIP archives
        - zip           # Create ZIP archives
        - lm-sensors    # Hardware health monitoring utilities
        - net-tools     # Network configuration tools (ifconfig, netstat, etc.)
        - dnsutils      # DNS utilities (dig, nslookup, etc.)
        - nfs-common    # NFS client utilities for mounting network shares
      # These packages provide essential functionality for system administration,
      # monitoring, network diagnostics, and integration with the home lab environment

    # Task 6: Refresh systemd configuration
    - name: Reload systemd configuration
      ansible.builtin.systemd:
        daemon_reload: true  # Reload unit files and systemd configuration
      # This ensures any systemd service changes are recognized by the system
      # Important after package installations that add new system services